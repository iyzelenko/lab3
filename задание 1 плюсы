#include <iostream>
#include <cmath>

double f(double x) {
    return pow(x, 4) / (20 + pow(x, 2));
}

double rectangle_method(double a, double b, int n) {
    double delta_x = (b - a) / n;
    double integral = 0;
    for (int i = 0; i < n; ++i) {
        double x_i = a + i * delta_x;
        integral += f(x_i);
    }
    integral *= delta_x;
    return integral;
}

double trapezoidal_method(double a, double b, int n) {
    double delta_x = (b - a) / n;
    double integral = 0.5 * (f(a) + f(b));
    for (int i = 1; i < n; ++i) {
        double x_i = a + i * delta_x;
        integral += f(x_i);
    }
    integral *= delta_x;
    return integral;
}

double simpsons_method(double a, double b, int n) {
    double delta_x = (b - a) / n;
    double integral = f(a) + f(b);
    for (int i = 1; i < n; ++i) {
        double x_i = a + i * delta_x;
        if (i % 2 == 0) {
            integral += 2 * f(x_i);
        }
        else {
            integral += 4 * f(x_i);
        }
    }
    integral *= delta_x / 3.0;
    return integral;
}

int main() {
    setlocale(LC_ALL, "Russian");
    double a = 1; // Нижний предел интегрирования
    double b = 2; // Верхний предел интегрирования
    int n = 1; // Начальное количество интервалов

    // Метод прямоугольников
    double prev_integral = rectangle_method(a, b, n);
    do {
        n *= 2;
        double integral = rectangle_method(a, b, n);
        if (fabs(integral - prev_integral) < 1e-6) {
            std::cout << "Метод прямоугольников:" << std::endl;
            std::cout << "Значение интеграла: " << integral << std::endl;
            std::cout << "Количество интервалов: " << n << std::endl;
            break;
        }
        prev_integral = integral;
    } while (true);

    // Метод трапеций
    n = 1; // Сброс количества интервалов
    prev_integral = trapezoidal_method(a, b, n);
    do {
        n *= 2;
        double integral = trapezoidal_method(a, b, n);
        if (fabs(integral - prev_integral) < 1e-6) {
            std::cout << "\nМетод трапеций:" << std::endl;
            std::cout << "Значение интеграла: " << integral << std::endl;
            std::cout << "Количество интервалов: " << n << std::endl;
            break;
        }
        prev_integral = integral;
    } while (true);

    // Метод Симпсона
    n = 1; // Сброс количества интервалов
    prev_integral = simpsons_method(a, b, n);
    do {
        n *= 2;
        double integral = simpsons_method(a, b, n);
        if (fabs(integral - prev_integral) < 1e-6) {
            std::cout << "\nМетод Симпсона:" << std::endl;
            std::cout << "Значение интеграла: " << integral << std::endl;
            std::cout << "Количество интервалов: " << n << std::endl;
            break;
        }
        prev_integral = integral;
    } while (true);

    return 0;
}
